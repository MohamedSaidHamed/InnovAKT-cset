name: Build InnovAKT-CSET Installer

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 12.5.0.0)'
        required: true
        default: '12.5.0.0'

env:
  BUILD_VERSION: ${{ github.event.inputs.version || github.ref_name }}
  DOTNET_VERSION: '7.0'
  NODE_VERSION: '18'

jobs:
  build-installer:
    runs-on: windows-latest
    
    steps:
    # Checkout Code
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup Build Environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: CSETWebNg/package-lock.json

    # Install WiX Toolset
    - name: Install WiX Toolset
      run: |
        dotnet tool install --global wix --version 4.0.5
        wix --version
        echo "WiX Toolset installed successfully"

    # Build CSET Application
    - name: Build CSET Backend (API)
      run: |
        cd CSETWebApi/CSETWeb_Api/CSETWeb_ApiCore
        dotnet publish -c Release -o ../../../dist/api --self-contained false
      shell: cmd

    - name: Install Angular Dependencies
      run: |
        cd CSETWebNg
        npm ci
      shell: cmd

    - name: Build CSET Frontend (Angular)
      run: |
        cd CSETWebNg
        npm run build -- --configuration production
        xcopy /E /I /Y dist ..\dist\web
      shell: cmd

    # Download Microsoft Prerequisites - Simplified approach
    - name: Download Prerequisites
      run: |
        mkdir installer\downloads
        
        # SQL Server LocalDB 2022 - Try official URL with error handling
        try {
            Invoke-WebRequest -Uri "https://download.microsoft.com/download/3/8/d/38de7036-2433-4207-8eae-06e247e17b25/SqlLocalDB.msi" -OutFile "installer\downloads\SqlLocalDB2022.msi" -UseBasicParsing
            Write-Host "✅ Downloaded SQL Server LocalDB 2022"
        } catch {
            Write-Host "⚠️ Failed to download SQL Server LocalDB: $($_.Exception.Message)"
            # Create placeholder - installer will check for existing installation
            echo "Placeholder for SQL LocalDB" > installer\downloads\SqlLocalDB2022.msi
        }
        
        # .NET 7 - Use GitHub releases as fallback
        try {
            Invoke-WebRequest -Uri "https://github.com/dotnet/core/releases/download/v7.0.20/windowsdesktop-runtime-7.0.20-win-x64.exe" -OutFile "installer\downloads\windowsdesktop-runtime-7.0.20-win-x64.exe" -UseBasicParsing
            Write-Host "✅ Downloaded .NET 7 Desktop Runtime"
        } catch {
            Write-Host "⚠️ Failed to download .NET Runtime: $($_.Exception.Message)"
            echo "Placeholder for .NET Runtime" > installer\downloads\windowsdesktop-runtime-7.0.20-win-x64.exe
        }
        
        # ASP.NET Core 7 - Use GitHub releases as fallback
        try {
            Invoke-WebRequest -Uri "https://github.com/dotnet/core/releases/download/v7.0.20/aspnetcore-runtime-7.0.20-win-x64.exe" -OutFile "installer\downloads\aspnetcore-runtime-7.0.20-win-x64.exe" -UseBasicParsing
            Write-Host "✅ Downloaded ASP.NET Core Runtime"
        } catch {
            Write-Host "⚠️ Failed to download ASP.NET Core Runtime: $($_.Exception.Message)"
            echo "Placeholder for ASP.NET Runtime" > installer\downloads\aspnetcore-runtime-7.0.20-win-x64.exe
        }
        
        # List what we have with sizes
        echo "=== Downloaded Prerequisites ==="
        Get-ChildItem installer\downloads | ForEach-Object {
          $sizeGB = [math]::Round($_.Length / 1GB, 3)
          $sizeMB = [math]::Round($_.Length / 1MB, 1)
          if ($sizeGB -gt 0.1) {
            Write-Host "$($_.Name): $sizeGB GB" -ForegroundColor Cyan
          } else {
            Write-Host "$($_.Name): $sizeMB MB" -ForegroundColor Cyan
          }
        }
        $totalSize = (Get-ChildItem installer\downloads | Measure-Object -Property Length -Sum).Sum / 1GB
        Write-Host "Total Prerequisites Size: $([math]::Round($totalSize, 3)) GB" -ForegroundColor Green
      shell: powershell

    # Prepare Database Files
    - name: Prepare Database Files
      run: |
        mkdir installer\database
        REM Create placeholder database files for the installer
        echo Database preparation completed > installer\database\README.txt
        echo The installer will create the database during installation >> installer\database\README.txt
      shell: cmd

    # Debug Build Output Structure
    - name: Debug Build Output
      run: |
        echo "=== Build Output Structure ==="
        Get-ChildItem -Recurse dist | Select-Object FullName
        echo "=== API Output ==="
        if (Test-Path "dist\api") { Get-ChildItem dist\api }
        echo "=== Web Output ==="
        if (Test-Path "dist\web") { Get-ChildItem dist\web }
      shell: powershell

    # Set Build Variables
    - name: Set WiX Variables
      run: |
        echo "BuildOutput=${{ github.workspace }}\dist" >> $env:GITHUB_ENV
        echo "DatabasePath=${{ github.workspace }}\installer\database" >> $env:GITHUB_ENV
      shell: powershell

    # Build Main MSI Package
    - name: Build Main Application MSI
      run: |
        cd installer
        wix build InnovAKT-CSET.wxs -o InnovAKT-CSET.msi -d BuildOutput="${{ env.BuildOutput }}" -d DatabasePath="${{ env.DatabasePath }}"
      shell: cmd

    # Create Alternative Installers - Multiple approaches
    - name: Create PowerShell Installer Package
      run: |
        cd installer
        echo "Creating PowerShell installer package..."
        mkdir "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}"
        copy Install-InnovAKT-CSET.ps1 "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}\"
        copy InnovAKT-CSET.msi "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}\"
        copy License.rtf "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}\"
        mkdir "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}\downloads"
        copy downloads\*.* "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}\downloads\" 2>nul || echo "Downloads not available"
        powershell Compress-Archive -Path "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}" -DestinationPath "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}.zip"
        echo "✅ PowerShell installer package created"
        echo "=== Package Contents and Sizes ==="
        dir "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}" /s
        dir InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}.zip
      shell: cmd

    - name: Install NSIS (if PowerShell not preferred)
      run: |
        echo "Installing NSIS for alternative installer..."
        choco install nsis -y
        echo "✅ NSIS installed"
      shell: cmd
      
    - name: Build NSIS Installer
      run: |
        cd installer
        echo "Building NSIS installer..."
        makensis InnovAKT-CSET.nsi
        if exist "InnovAKT-CSET-v${{ env.BUILD_VERSION }}-Setup.exe" (
          echo "✅ NSIS installer created successfully"
        ) else (
          echo "⚠️ NSIS installer failed, PowerShell package available"
        )
      shell: cmd

    # Sign the Installer (Optional - requires signing certificate)
    - name: Sign Installer
      if: false  # Enable this when you have a code signing certificate
      run: |
        # signtool sign /f certificate.pfx /p password /t http://timestamp.sectigo.com installer\InnovAKT-CSET-v${{ env.BUILD_VERSION }}.exe
        echo "Signing step - add your certificate here"
      shell: cmd

    # Generate SHA256 Hashes for all created files
    - name: Generate SHA256 Hashes
      run: |
        cd installer
        echo "Generating SHA256 hashes for all installer files..."
        
        # Hash the MSI
        if (Test-Path "InnovAKT-CSET.msi") {
          $hash = Get-FileHash "InnovAKT-CSET.msi" -Algorithm SHA256
          $hash.Hash | Out-File "InnovAKT-CSET.msi.sha256"
          echo "MSI SHA256: $($hash.Hash)"
        }
        
        # Hash the PowerShell package
        if (Test-Path "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}.zip") {
          $hash = Get-FileHash "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}.zip" -Algorithm SHA256
          $hash.Hash | Out-File "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}.zip.sha256"
          $zipSize = (Get-Item "InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}.zip").Length / 1MB
          echo "PowerShell Package SHA256: $($hash.Hash) (Size: $([math]::Round($zipSize, 2)) MB)"
        }
        
        # Hash the NSIS installer if it exists
        if (Test-Path "InnovAKT-CSET-v${{ env.BUILD_VERSION }}-Setup.exe") {
          $hash = Get-FileHash "InnovAKT-CSET-v${{ env.BUILD_VERSION }}-Setup.exe" -Algorithm SHA256
          $hash.Hash | Out-File "InnovAKT-CSET-v${{ env.BUILD_VERSION }}-Setup.exe.sha256"
          $nsisSize = (Get-Item "InnovAKT-CSET-v${{ env.BUILD_VERSION }}-Setup.exe").Length / 1MB
          echo "NSIS Installer SHA256: $($hash.Hash) (Size: $([math]::Round($nsisSize, 2)) MB)"
        }
        
        echo "All SHA256 hashes generated successfully"
      shell: powershell

    # Upload Build Artifacts - Multiple installer types
    - name: Upload Installer Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: InnovAKT-CSET-Installer-${{ env.BUILD_VERSION }}
        path: |
          installer/InnovAKT-CSET.msi
          installer/InnovAKT-CSET-PowerShell-v${{ env.BUILD_VERSION }}.zip
          installer/InnovAKT-CSET-v${{ env.BUILD_VERSION }}-Setup.exe
          installer/*.sha256
        retention-days: 30

    # Create GitHub Release
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          installer/InnovAKT-CSET-v${{ env.BUILD_VERSION }}.exe
          installer/InnovAKT-CSET-v${{ env.BUILD_VERSION }}.exe.sha256
        body: |
          ## InnovAKT-CSET v${{ env.BUILD_VERSION }}
          
          ### What's New
          - Based on CSET cybersecurity evaluation tool
          - Standalone installation with embedded dependencies
          - Local SQL Server LocalDB for offline operation
          - No internet connection required after installation
          
          ### Installation
          1. Download `InnovAKT-CSET-v${{ env.BUILD_VERSION }}.exe`
          2. Run as Administrator
          3. Follow the installation wizard
          4. Launch InnovAKT-CSET from Start Menu or Desktop
          
          ### System Requirements
          - Windows 10 or higher (64-bit)
          - 6 GB free disk space
          - 4 GB RAM
          - Administrator privileges for installation
          
          ### SHA256 Checksum
          See the `.sha256` file for verification.
          
          ---
          🤖 Built with GitHub Actions
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Test the installer
  test-installer:
    needs: build-installer
    runs-on: windows-latest
    if: false  # Enable when you want to test installations
    
    steps:
    - name: Download Installer
      uses: actions/download-artifact@v4
      with:
        name: InnovAKT-CSET-Installer-${{ env.BUILD_VERSION }}
        
    - name: Test Installation
      run: |
        # Run installer in silent mode for testing
        Start-Process "InnovAKT-CSET-v${{ env.BUILD_VERSION }}.exe" -ArgumentList "/quiet" -Wait
        
        # Check if application was installed
        $installed = Test-Path "C:\Program Files\InnovAKT-CSET\CSETWebCore.Api.exe"
        if (-not $installed) {
          throw "Installation failed - application not found"
        }
        
        echo "Installation test passed!"
      shell: powershell